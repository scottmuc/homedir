#!/usr/bin/env bash

set -eu
set -o pipefail

[[ -z "${DEBUG:-}" ]] || set -x

main() {
  local secret_title
  local encoded_json
  local ssh_key_passphrase
  local private_key
  local temp_dir
  secret_title="$1"

  if [[ -z "${secret_title}" ]]; then
    print_usage_and_exit
  fi

  log_into_1password

  ssh_key_passphrase="$(xkcd-password-generator)"
  temp_dir=$(mktemp -d -t tmp.XXXXXXXXXX)
  ssh-keygen -t rsa -b 2048 -C "${secret_title}" -f "${temp_dir}/id_rsa" -N "${ssh_key_passphrase}"
  private_key=$(jq -n --arg key "$(cat ${temp_dir}/id_rsa)" '{ test: $key }' | jq .test | tr  -d '"')

  IFS='' read -r -d '' credential_json <<JSON ||
{
  "notesPlain": "${private_key}",
  "sections": [
    {
      "fields": [
        {
          "k": "concealed",
          "t": "disk encryption passphrase",
          "v": "$(xkcd-password-generator)"
        },
        {
          "k": "concealed",
          "t": "machine password",
          "v": "$(xkcd-password-generator)"
        },
        {
          "k": "concealed",
          "t": "ssh key passphrase",
          "v": "${ssh_key_passphrase}"
        }
      ]
    }
  ]
}
JSON
  true

  encoded_json=$(echo ${credential_json} | op encode)

  op create item "Secure Note" "${encoded_json}" \
    --title="${secret_title}" \
    --vault="Automation"
}

print_usage_and_exit() {
  cat <<HELP
usage: $0 <name of credential>

Creates a new 1password Secure Note with credentials that
can be used for a machine repave

HELP

  exit 1
}

log_into_1password() {
  eval $(op signin my)
}

main "$@"
